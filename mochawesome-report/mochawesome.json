{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 23,
    "pending": 0,
    "failures": 3,
    "start": "2018-11-16T13:58:28.637Z",
    "end": "2018-11-16T13:58:31.332Z",
    "duration": 2695,
    "testsRegistered": 26,
    "passPercent": 88.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ac753d31-726f-4080-9c7d-7b515c6859b1",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0e9cbd34-158a-4587-9a64-5fbed51f1878",
        "title": "Testing ReserveTickets",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\reserve.Spec.js",
        "file": "\\test\\Admin\\reserve.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing ReserveTickets \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "9cb8385a-44bf-4108-9ffe-b16a3a036b29",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields of student correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of student correctly",
            "timedOut": false,
            "duration": 137,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "d139fc7d-0477-469c-b7f5-85fc1dbdfc6a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields of general audience correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of general audience correctly",
            "timedOut": false,
            "duration": 359,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "c97f1a1a-38fa-421a-b774-9746b175ca27",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the FirstName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the FirstName",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field FirstName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "e9aa9e9b-10e4-407d-ad85-2de4f00a84ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the LastName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the LastName",
            "timedOut": false,
            "duration": 118,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field LastName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "4fe43313-4555-41f8-8d0c-86bde8111644",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the EmailAdress",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the EmailAdress",
            "timedOut": false,
            "duration": 58,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field EmailAddress\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "285fe2da-aadb-41c4-84a2-caeb6c6c7d6d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except isStudent",
            "fullTitle": "Testing ReserveTickets Entered all the fields except isStudent",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field isStudent\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "2838f8a1-7787-4136-9c20-496e6a874657",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for FirstName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for FirstName",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"1234\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "f11b054d-9f53-40f0-8021-7819af23d455",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for LastName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for LastName",
            "timedOut": false,
            "duration": 55,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"12345\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "40fe1935-cb56-4275-8161-9fcdac9bd89e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid entry in the field EmailAddress",
            "fullTitle": "Testing ReserveTickets Entered invalid entry in the field EmailAddress",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "144f6404-1d57-4e1b-bf3d-d479f82676cc",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e9aa9e9b-10e4-407d-ad85-2de4f00a84ee",
          "4fe43313-4555-41f8-8d0c-86bde8111644",
          "285fe2da-aadb-41c4-84a2-caeb6c6c7d6d",
          "2838f8a1-7787-4136-9c20-496e6a874657",
          "f11b054d-9f53-40f0-8021-7819af23d455",
          "40fe1935-cb56-4275-8161-9fcdac9bd89e",
          "144f6404-1d57-4e1b-bf3d-d479f82676cc"
        ],
        "failures": [
          "d139fc7d-0477-469c-b7f5-85fc1dbdfc6a",
          "c97f1a1a-38fa-421a-b774-9746b175ca27"
        ],
        "pending": [],
        "skipped": [],
        "duration": 939,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "acd49a0e-ed3e-4c7b-bcb4-b9a64353b2bb",
        "title": "Testing GetSectionList",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\section.Spec.js",
        "file": "\\test\\Admin\\section.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing GetSectionList \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "908f891e-cbc0-46a6-8bd6-f955ab466ca9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using correct url",
            "fullTitle": "Testing GetSectionList Using correct url",
            "timedOut": false,
            "duration": 80,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.get('/admin/sectionlist')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.status).to.equal(200)\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "7f713cf3-ddea-4cd5-aef4-0f5874e96422",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7f713cf3-ddea-4cd5-aef4-0f5874e96422"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 80,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d30dea6a-2e93-446a-98c3-a182d9491705",
        "title": "Testing AddShow",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\show.Spec.js",
        "file": "\\test\\Admin\\show.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing AddShow \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "64e82ba0-ef3d-43c7-bc5c-f3ae3c74c19c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields except the image",
            "fullTitle": "Testing AddShow Entered all the fields except the image",
            "timedOut": false,
            "duration": 409,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422,done)",
            "err": {},
            "isRoot": false,
            "uuid": "edc9c54f-26a0-4976-900f-cde2dee19e85",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Title",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Title",
            "timedOut": false,
            "duration": 64,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.statusCode).to.equal(422)\n    //console.log(response)\n    expect(response.text).to.equal(\"error opening file\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "3ed814dd-11b0-4f99-b34c-e83b69d6aab8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Description",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Description",
            "timedOut": false,
            "duration": 71,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Description\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4fd23a30-a35a-4c5e-8b48-210bea7f5549",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 55,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\",\"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "a9bfb9bf-521c-42c0-a5c9-73ca093eaf9b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Time",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Time",
            "timedOut": false,
            "duration": 54,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Time\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "b11b71c4-947f-4555-95e3-8206e6e6f931",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "de64c2b5-21f3-499b-b82b-df268741441f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Number of Tickets",
            "fullTitle": "Testing AddShow Entered all the fields except the Number of Tickets",
            "timedOut": false,
            "duration": 72,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field NumberOfTickets\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "ab4a7ccf-7696-41fd-b4c3-21e28b8492cd",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Ticket Details",
            "fullTitle": "Testing AddShow Entered all the fields except the Ticket Details",
            "timedOut": false,
            "duration": 12,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field TicketDetails\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "772972f9-8a85-43ee-8bc6-03bebc69fb24",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Venue",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Venue",
            "timedOut": false,
            "duration": 60,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field ShowVenue\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "63f474aa-c79a-4df8-b00a-653c1f4af755",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Time field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Time field",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"I am entering text\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "213fc5dc-c908-4fd9-87d0-eb79c0d77da2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Date field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Date field",
            "timedOut": false,
            "duration": 51,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"I am entering text\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "5c777c26-ecd1-4592-a5f0-04c1b9530d18",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Number of Tickets field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Number of Tickets field",
            "timedOut": false,
            "duration": 13,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"I am entering text\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"",
              "estack": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "e56bafef-bb4d-4d2b-ac1d-eba17df69c01",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "edc9c54f-26a0-4976-900f-cde2dee19e85",
          "3ed814dd-11b0-4f99-b34c-e83b69d6aab8",
          "4fd23a30-a35a-4c5e-8b48-210bea7f5549",
          "a9bfb9bf-521c-42c0-a5c9-73ca093eaf9b",
          "b11b71c4-947f-4555-95e3-8206e6e6f931",
          "de64c2b5-21f3-499b-b82b-df268741441f",
          "ab4a7ccf-7696-41fd-b4c3-21e28b8492cd",
          "772972f9-8a85-43ee-8bc6-03bebc69fb24",
          "63f474aa-c79a-4df8-b00a-653c1f4af755",
          "213fc5dc-c908-4fd9-87d0-eb79c0d77da2",
          "5c777c26-ecd1-4592-a5f0-04c1b9530d18"
        ],
        "failures": [
          "e56bafef-bb4d-4d2b-ac1d-eba17df69c01"
        ],
        "pending": [],
        "skipped": [],
        "duration": 972,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "84f53a65-da54-4fbd-9e39-fa84c07ea894",
        "title": "Testing Login",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js",
        "file": "\\test\\Admin\\test.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing Login \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "0f11f26a-fe9e-4eb8-b925-c7a31995e729",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using Correct Username and Password",
            "fullTitle": "Testing Login Using Correct Username and Password",
            "timedOut": false,
            "duration": 308,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(200)\n.then(response => {\n    expect(response.body.message).to.equal(\"Login Successful\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "d0c0740c-df1c-4888-8953-e8dab462bd8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using correct Username and incorrect Password",
            "fullTitle": "Testing Login Using correct Username and incorrect Password",
            "timedOut": false,
            "duration": 176,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin12\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n       //  console.log(response.text)\n  expect(response.text).to.equal(\"Authentication Failed\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "10059f6f-27af-4727-92d3-48fedf0f6706",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using InCorrect Username and correct Password",
            "fullTitle": "Testing Login Using InCorrect Username and correct Password",
            "timedOut": false,
            "duration": 56,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin2\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"User Does not exist\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "f41a010e-a0fd-4990-a9b7-e7b28ed32fd9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using Null Username and Password",
            "fullTitle": "Testing Login Using Null Username and Password",
            "timedOut": false,
            "duration": 59,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send()\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"Unauthorized\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "0fb08b8e-9471-4bf0-9017-c10fa3e51471",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d0c0740c-df1c-4888-8953-e8dab462bd8b",
          "10059f6f-27af-4727-92d3-48fedf0f6706",
          "f41a010e-a0fd-4990-a9b7-e7b28ed32fd9",
          "0fb08b8e-9471-4bf0-9017-c10fa3e51471"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 599,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}