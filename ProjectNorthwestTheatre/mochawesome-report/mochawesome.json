{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 23,
    "pending": 0,
    "failures": 3,
    "start": "2018-12-10T18:59:25.592Z",
    "end": "2018-12-10T18:59:29.650Z",
    "duration": 4058,
    "testsRegistered": 26,
    "passPercent": 88.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "509c98ae-bd7c-4a1e-a8aa-e05e5b61d072",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "709ec1c2-b4d3-40cb-8b53-a35d6d1fc42b",
        "title": "Testing ReserveTickets",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\reserve.Spec.js",
        "file": "\\test\\Admin\\reserve.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing ReserveTickets \"after all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "ffdbd0e9-536f-4a87-ba22-6439c3a998e7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields of student correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of student correctly",
            "timedOut": false,
            "duration": 190,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "4496855e-664b-436a-9ddb-8228c56ea4fb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields of general audience correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of general audience correctly",
            "timedOut": false,
            "duration": 694,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "0c85ef7a-d3a0-4686-83ed-14445fc1e852",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the FirstName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the FirstName",
            "timedOut": false,
            "duration": 90,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field FirstName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "31b6cd63-7505-40c1-a9da-a01fa6e53058",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the LastName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the LastName",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field LastName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "49624349-90ff-4569-9cb3-d7da9d8e6483",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the EmailAdress",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the EmailAdress",
            "timedOut": false,
            "duration": 98,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field EmailAddress\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "b973dccd-f0c1-4cd9-8da5-781c614e47f3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except isStudent",
            "fullTitle": "Testing ReserveTickets Entered all the fields except isStudent",
            "timedOut": false,
            "duration": 104,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field isStudent\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "bda63312-f59c-45b1-bb78-094a15b44118",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for FirstName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for FirstName",
            "timedOut": false,
            "duration": 95,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"1234\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "f1119b2d-cd19-4378-bcbd-f588a03372f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for LastName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for LastName",
            "timedOut": false,
            "duration": 112,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"12345\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "65e07ff7-7442-47e6-ab72-3c1e628934d7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid entry in the field EmailAddress",
            "fullTitle": "Testing ReserveTickets Entered invalid entry in the field EmailAddress",
            "timedOut": false,
            "duration": 87,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "a27c24f1-8aa1-4182-bd4a-11587a58e7f8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "31b6cd63-7505-40c1-a9da-a01fa6e53058",
          "49624349-90ff-4569-9cb3-d7da9d8e6483",
          "b973dccd-f0c1-4cd9-8da5-781c614e47f3",
          "bda63312-f59c-45b1-bb78-094a15b44118",
          "f1119b2d-cd19-4378-bcbd-f588a03372f0",
          "65e07ff7-7442-47e6-ab72-3c1e628934d7",
          "a27c24f1-8aa1-4182-bd4a-11587a58e7f8"
        ],
        "failures": [
          "4496855e-664b-436a-9ddb-8228c56ea4fb",
          "0c85ef7a-d3a0-4686-83ed-14445fc1e852"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1572,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "dbdf5767-b108-4a13-939a-29cfe394f627",
        "title": "Testing GetSectionList",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\section.Spec.js",
        "file": "\\test\\Admin\\section.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing GetSectionList \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "868e6481-67d4-4989-b919-27605db513e9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using correct url",
            "fullTitle": "Testing GetSectionList Using correct url",
            "timedOut": false,
            "duration": 123,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.get('/admin/sectionlist')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.status).to.equal(200)\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c455c2d6-5724-4fc4-a641-ad038acf2c7d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c455c2d6-5724-4fc4-a641-ad038acf2c7d"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 123,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1fe4e90f-f3bb-4fe7-a237-b7c4994b03b1",
        "title": "Testing AddShow",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\show.Spec.js",
        "file": "\\test\\Admin\\show.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing AddShow \"after all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "32e9fba3-40f2-4a4f-8578-3676a7cd06f6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields except the image",
            "fullTitle": "Testing AddShow Entered all the fields except the image",
            "timedOut": false,
            "duration": 661,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422,done)",
            "err": {},
            "isRoot": false,
            "uuid": "803ce601-bb0e-40a2-9bb2-d81bedcf8660",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Title",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Title",
            "timedOut": false,
            "duration": 96,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.statusCode).to.equal(422)\n    //console.log(response)\n    expect(response.text).to.equal(\"error opening file\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "6e56233d-6403-4461-b383-874cdff3217a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Description",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Description",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Description\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "cfcf0d4d-1611-4eb2-8cef-306b76120397",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 113,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\",\"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "1b1246e6-4305-493e-915f-1ed522f8d052",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Time",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Time",
            "timedOut": false,
            "duration": 104,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Time\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e7438ba7-f472-42e4-8ae9-93b2d2e0e5e1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 102,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "87d95c32-e8b3-4973-9444-219aa8433b4e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Number of Tickets",
            "fullTitle": "Testing AddShow Entered all the fields except the Number of Tickets",
            "timedOut": false,
            "duration": 92,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field NumberOfTickets\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "5060a3eb-abad-46c2-b2e8-df35980f8e9f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Ticket Details",
            "fullTitle": "Testing AddShow Entered all the fields except the Ticket Details",
            "timedOut": false,
            "duration": 8,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field TicketDetails\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "50e70314-a585-4f81-8375-f99a897c75c8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Venue",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Venue",
            "timedOut": false,
            "duration": 101,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field ShowVenue\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c99dc8f1-9700-46f0-9b90-9b0cf432e564",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Time field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Time field",
            "timedOut": false,
            "duration": 93,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"I am entering text\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "925fccc3-c59d-4408-8acd-70b67501007a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Date field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Date field",
            "timedOut": false,
            "duration": 91,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"I am entering text\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "15262fbb-7010-47f9-afa6-ff8dd9ffbb40",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Number of Tickets field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Number of Tickets field",
            "timedOut": false,
            "duration": 5,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"I am entering text\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"",
              "estack": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "51ccc58e-8e5e-499b-8775-cacdbbf9378d",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "803ce601-bb0e-40a2-9bb2-d81bedcf8660",
          "6e56233d-6403-4461-b383-874cdff3217a",
          "cfcf0d4d-1611-4eb2-8cef-306b76120397",
          "1b1246e6-4305-493e-915f-1ed522f8d052",
          "e7438ba7-f472-42e4-8ae9-93b2d2e0e5e1",
          "87d95c32-e8b3-4973-9444-219aa8433b4e",
          "5060a3eb-abad-46c2-b2e8-df35980f8e9f",
          "50e70314-a585-4f81-8375-f99a897c75c8",
          "c99dc8f1-9700-46f0-9b90-9b0cf432e564",
          "925fccc3-c59d-4408-8acd-70b67501007a",
          "15262fbb-7010-47f9-afa6-ff8dd9ffbb40"
        ],
        "failures": [
          "51ccc58e-8e5e-499b-8775-cacdbbf9378d"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1567,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0c3aebe6-3c3b-4af6-a9a8-db7d6d83df1e",
        "title": "Testing Login",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js",
        "file": "\\test\\Admin\\test.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing Login \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "9e2b879d-ae06-42d4-af79-544513d6ca20",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using Correct Username and Password",
            "fullTitle": "Testing Login Using Correct Username and Password",
            "timedOut": false,
            "duration": 418,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(200)\n.then(response => {\n    expect(response.body.message).to.equal(\"Login Successful\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "67abfed7-749f-4611-828f-87035c5f658f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using correct Username and incorrect Password",
            "fullTitle": "Testing Login Using correct Username and incorrect Password",
            "timedOut": false,
            "duration": 172,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin12\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n       //  console.log(response.text)\n  expect(response.text).to.equal(\"Authentication Failed\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "d1f158fe-083e-49ee-ae64-217c1eec0aeb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using InCorrect Username and correct Password",
            "fullTitle": "Testing Login Using InCorrect Username and correct Password",
            "timedOut": false,
            "duration": 79,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin2\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"User Does not exist\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "3ce11664-27e9-45ac-a802-a1f738bb73e5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using Null Username and Password",
            "fullTitle": "Testing Login Using Null Username and Password",
            "timedOut": false,
            "duration": 94,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send()\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"Unauthorized\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "07feeb8b-e29f-46b7-a651-c531ebb235e7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "67abfed7-749f-4611-828f-87035c5f658f",
          "d1f158fe-083e-49ee-ae64-217c1eec0aeb",
          "3ce11664-27e9-45ac-a802-a1f738bb73e5",
          "07feeb8b-e29f-46b7-a651-c531ebb235e7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 763,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}