{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 0,
    "pending": 0,
    "failures": 26,
    "start": "2018-11-16T13:56:25.948Z",
    "end": "2018-11-16T13:56:56.263Z",
    "duration": 30315,
    "testsRegistered": 26,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 14,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "5edf4a5e-9aa8-4d4b-af8b-75300a70fc53",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "018d37ca-ccb6-4e48-b685-921b527d548d",
        "title": "Testing ReserveTickets",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\reserve.Spec.js",
        "file": "\\test\\Admin\\reserve.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing ReserveTickets \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "81c9fbb5-2a9f-4790-99e4-adb85985cb0b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields of student correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of student correctly",
            "timedOut": false,
            "duration": 1019,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "185f2c01-55c8-4c94-ab12-aa7b438e01d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields of general audience correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of general audience correctly",
            "timedOut": false,
            "duration": 1009,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "957c0ba9-efe6-445e-bc3b-8979f16ca160",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the FirstName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the FirstName",
            "timedOut": false,
            "duration": 1005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field FirstName\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:51:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "00e350fa-6574-46a1-a46d-96064e85d9bf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the LastName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the LastName",
            "timedOut": false,
            "duration": 1031,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field LastName\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:63:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "639a4601-36ad-4b84-aa00-47a5bec25238",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the EmailAdress",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the EmailAdress",
            "timedOut": false,
            "duration": 1004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field EmailAddress\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:75:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "b369ae21-de65-466c-a715-154e1acaed00",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except isStudent",
            "fullTitle": "Testing ReserveTickets Entered all the fields except isStudent",
            "timedOut": false,
            "duration": 1004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field isStudent\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:87:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "d4b6fbc8-f070-4b27-8e76-f658b03df9df",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for FirstName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for FirstName",
            "timedOut": false,
            "duration": 1003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"1234\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:99:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "4da7ff17-f21c-4d08-909e-1ade7492912d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for LastName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for LastName",
            "timedOut": false,
            "duration": 1005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"12345\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:111:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "acfa70dc-0f0b-420a-9c3e-2fc42b4959a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid entry in the field EmailAddress",
            "fullTitle": "Testing ReserveTickets Entered invalid entry in the field EmailAddress",
            "timedOut": false,
            "duration": 1006,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\reserve.Spec.js:123:17)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "34790b18-c9bf-4f54-8207-453a681e55bb",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "185f2c01-55c8-4c94-ab12-aa7b438e01d4",
          "957c0ba9-efe6-445e-bc3b-8979f16ca160",
          "00e350fa-6574-46a1-a46d-96064e85d9bf",
          "639a4601-36ad-4b84-aa00-47a5bec25238",
          "b369ae21-de65-466c-a715-154e1acaed00",
          "d4b6fbc8-f070-4b27-8e76-f658b03df9df",
          "4da7ff17-f21c-4d08-909e-1ade7492912d",
          "acfa70dc-0f0b-420a-9c3e-2fc42b4959a0",
          "34790b18-c9bf-4f54-8207-453a681e55bb"
        ],
        "pending": [],
        "skipped": [],
        "duration": 9086,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "96003a1d-c1b4-4b67-a642-b8bf01318184",
        "title": "Testing GetSectionList",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\section.Spec.js",
        "file": "\\test\\Admin\\section.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing GetSectionList \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "e5376902-1d63-49d9-b4a4-b2240dae35d6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using correct url",
            "fullTitle": "Testing GetSectionList Using correct url",
            "timedOut": false,
            "duration": 1008,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.get('/admin/sectionlist')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.status).to.equal(200)\n    done()\n})",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "1b16941b-4258-448e-bee9-09cac44a7665",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "1b16941b-4258-448e-bee9-09cac44a7665"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1008,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "01920181-197a-4ed5-b788-b4728a423da5",
        "title": "Testing AddShow",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\show.Spec.js",
        "file": "\\test\\Admin\\show.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing AddShow \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "8de4d805-f997-40ea-a59d-4a43558210b0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields except the image",
            "fullTitle": "Testing AddShow Entered all the fields except the image",
            "timedOut": false,
            "duration": 1003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422,done)",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "62e5cac9-c8cd-46f9-8f74-4b0c58424de5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Title",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Title",
            "timedOut": false,
            "duration": 1005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.statusCode).to.equal(422)\n    //console.log(response)\n    expect(response.text).to.equal(\"error opening file\")\n    done()\n})",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "65331a33-98bc-4c4a-a6c9-96669dd120f7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Description",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Description",
            "timedOut": false,
            "duration": 1003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Description\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:44:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "67b0065d-b261-43bb-b872-f587ef82a57b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 1004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\",\"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:56:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "b2f33876-a596-433a-a70e-8537ea1909d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Time",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Time",
            "timedOut": false,
            "duration": 1002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Time\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:68:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "0e35affc-4ee6-4394-b2cd-edec401c5004",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 1009,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:80:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "e36c4442-678d-499f-b12e-7d9cc6b84264",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Number of Tickets",
            "fullTitle": "Testing AddShow Entered all the fields except the Number of Tickets",
            "timedOut": false,
            "duration": 1007,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field NumberOfTickets\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:92:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "ed571321-0b23-4551-9a39-3ddf99b06128",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Ticket Details",
            "fullTitle": "Testing AddShow Entered all the fields except the Ticket Details",
            "timedOut": false,
            "duration": 1007,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field TicketDetails\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:104:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "b5b8983f-0702-49aa-92a7-b3baff329bf2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Venue",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Venue",
            "timedOut": false,
            "duration": 1003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field ShowVenue\")\n    done()\n})",
            "err": {
              "message": "Error: done() called multiple times",
              "estack": "Error: done() called multiple times\n    at Test.request.post.send.set.expect (test\\Admin\\show.Spec.js:128:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:181:6)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "1f92675d-ebd4-41b1-87d3-106d4ae67d31",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Time field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Time field",
            "timedOut": false,
            "duration": 1005,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"I am entering text\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "a8e00b04-20f9-49ff-bc55-a9b4bb07fda5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Date field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Date field",
            "timedOut": false,
            "duration": 1003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"I am entering text\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "40ee6e9c-4bf7-4cd8-a50c-54baaeee83cb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Number of Tickets field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Number of Tickets field",
            "timedOut": false,
            "duration": 1004,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"I am entering text\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: ECONNREFUSED: Connection refused",
              "estack": "Error: ECONNREFUSED: Connection refused\n    at Test.assert (node_modules\\supertest\\lib\\test.js:165:15)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at ClientRequest.req.once.err (node_modules\\superagent\\lib\\node\\index.js:647:10)\n    at Socket.socketErrorListener (_http_client.js:375:9)\n    at emitErrorNT (internal/streams/destroy.js:82:8)\n    at emitErrorAndCloseNT (internal/streams/destroy.js:50:3)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "1517f385-901f-47e3-9c18-7057b383df98",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "62e5cac9-c8cd-46f9-8f74-4b0c58424de5",
          "65331a33-98bc-4c4a-a6c9-96669dd120f7",
          "67b0065d-b261-43bb-b872-f587ef82a57b",
          "b2f33876-a596-433a-a70e-8537ea1909d4",
          "0e35affc-4ee6-4394-b2cd-edec401c5004",
          "e36c4442-678d-499f-b12e-7d9cc6b84264",
          "ed571321-0b23-4551-9a39-3ddf99b06128",
          "b5b8983f-0702-49aa-92a7-b3baff329bf2",
          "1f92675d-ebd4-41b1-87d3-106d4ae67d31",
          "a8e00b04-20f9-49ff-bc55-a9b4bb07fda5",
          "40ee6e9c-4bf7-4cd8-a50c-54baaeee83cb",
          "1517f385-901f-47e3-9c18-7057b383df98"
        ],
        "pending": [],
        "skipped": [],
        "duration": 12055,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6f8e29ff-3890-4cc5-b4ab-f6a5eb5c0e4d",
        "title": "Testing Login",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js",
        "file": "\\test\\Admin\\test.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing Login \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "d064792e-b22d-4ad2-8935-7529ca5723b1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using Correct Username and Password",
            "fullTitle": "Testing Login Using Correct Username and Password",
            "timedOut": true,
            "duration": 2003,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(200)\n.then(response => {\n    expect(response.body.message).to.equal(\"Login Successful\")\n    done()\n})",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)"
            },
            "isRoot": false,
            "uuid": "eda4cef2-66b1-4732-b8dc-665e8107ed63",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using correct Username and incorrect Password",
            "fullTitle": "Testing Login Using correct Username and incorrect Password",
            "timedOut": true,
            "duration": 2002,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin12\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n       //  console.log(response.text)\n  expect(response.text).to.equal(\"Authentication Failed\")\n  done()\n})",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)"
            },
            "isRoot": false,
            "uuid": "31367bc2-f416-4ab9-b906-5fc0810472ee",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using InCorrect Username and correct Password",
            "fullTitle": "Testing Login Using InCorrect Username and correct Password",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin2\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"User Does not exist\")\n  done()\n})",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)"
            },
            "isRoot": false,
            "uuid": "0903b31f-c85e-4d28-890f-01d9888dfc90",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using Null Username and Password",
            "fullTitle": "Testing Login Using Null Username and Password",
            "timedOut": true,
            "duration": 2001,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send()\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"Unauthorized\")\n  done()\n})",
            "err": {
              "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)",
              "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js)"
            },
            "isRoot": false,
            "uuid": "852a7405-0f0a-4abe-8a89-107e42531a9c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "eda4cef2-66b1-4732-b8dc-665e8107ed63",
          "31367bc2-f416-4ab9-b906-5fc0810472ee",
          "0903b31f-c85e-4d28-890f-01d9888dfc90",
          "852a7405-0f0a-4abe-8a89-107e42531a9c"
        ],
        "pending": [],
        "skipped": [],
        "duration": 8007,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}