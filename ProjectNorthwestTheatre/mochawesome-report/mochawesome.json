{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 23,
    "pending": 0,
    "failures": 3,
    "start": "2018-11-16T04:20:25.645Z",
    "end": "2018-11-16T04:20:28.237Z",
    "duration": 2592,
    "testsRegistered": 26,
    "passPercent": 88.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "4d6474c9-2884-450d-8d33-9f57d4df5a44",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "9f66b87b-e917-419f-a28f-d8e21825a2b9",
        "title": "Testing ReserveTickets",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\reserve.Spec.js",
        "file": "\\test\\Admin\\reserve.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing ReserveTickets \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "1d0b253a-a7ef-4e0a-b3df-ace5a5568833",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields of student correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of student correctly",
            "timedOut": false,
            "duration": 66,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "e0369c76-5688-4402-a401-395096568331",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields of general audience correctly",
            "fullTitle": "Testing ReserveTickets Entered all the fields of general audience correctly",
            "timedOut": false,
            "duration": 46,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(200)\n    .then(response => {\n        // expect(response.text).to.equal(\"Reservation Successful\")\n        done()\n    })\n    .catch(err => {\n        done(err)\n    })",
            "err": {
              "message": "Error: expected 200 \"OK\", got 400 \"Bad Request\"",
              "estack": "Error: expected 200 \"OK\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "3d62bc5b-29d7-47cf-b557-d3268a260d68",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the FirstName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the FirstName",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field FirstName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "8fbbc5de-2fd0-4e99-aa5e-d525ab4df5a9",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the LastName",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the LastName",
            "timedOut": false,
            "duration": 143,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"EmailAddress\": \"s530459@gmail.com\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field LastName\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "38dc2313-92ae-4241-8ada-c2451003e390",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the EmailAdress",
            "fullTitle": "Testing ReserveTickets Entered all the fields except the EmailAdress",
            "timedOut": false,
            "duration": 103,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"NumberOfTicketsperPerson\": 5, \"isStudent\": false })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field EmailAddress\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "56609d2c-ab81-41fc-9f4c-457ed0630017",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except isStudent",
            "fullTitle": "Testing ReserveTickets Entered all the fields except isStudent",
            "timedOut": false,
            "duration": 53,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Missing the field isStudent\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "5d16db81-36f3-4154-85c4-9797b002eb73",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for FirstName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for FirstName",
            "timedOut": false,
            "duration": 152,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"1234\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "ec499ee1-7926-4a06-be8b-28b1c267837f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs for LastName",
            "fullTitle": "Testing ReserveTickets Entered invalid inputs for LastName",
            "timedOut": false,
            "duration": 73,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"12345\", \"EmailAddress\": \"s530459@nwmissouri.edu\", \"NumberOfTicketsperPerson\": 1})\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "887dc60b-b8a3-4879-94e6-1ef8aae68f09",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid entry in the field EmailAddress",
            "fullTitle": "Testing ReserveTickets Entered invalid entry in the field EmailAddress",
            "timedOut": false,
            "duration": 48,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n    .post('/admin/reserveTicket')\n    .send({ \"FirstName\": \"Varun\", \"LastName\": \"Illendula\", \"EmailAddress\": \"s530459\", \"NumberOfTicketsperPerson\": 1, \"isStudent\": true })\n    .set('Accept', 'application/json')\n    .expect(400, (err, response) => {\n        if (err) done(err)\n        // expect(response.text).to.equal(\"Unprocessable Entity\")\n        done()\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "3ad71412-295f-46f2-8dba-de6505d34e85",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8fbbc5de-2fd0-4e99-aa5e-d525ab4df5a9",
          "38dc2313-92ae-4241-8ada-c2451003e390",
          "56609d2c-ab81-41fc-9f4c-457ed0630017",
          "5d16db81-36f3-4154-85c4-9797b002eb73",
          "ec499ee1-7926-4a06-be8b-28b1c267837f",
          "887dc60b-b8a3-4879-94e6-1ef8aae68f09",
          "3ad71412-295f-46f2-8dba-de6505d34e85"
        ],
        "failures": [
          "e0369c76-5688-4402-a401-395096568331",
          "3d62bc5b-29d7-47cf-b557-d3268a260d68"
        ],
        "pending": [],
        "skipped": [],
        "duration": 726,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "483f5e31-8eab-43ec-8155-e249feb09a4d",
        "title": "Testing GetSectionList",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\section.Spec.js",
        "file": "\\test\\Admin\\section.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing GetSectionList \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "4a4f6b49-315c-4a17-beb4-5fc9f6fdf9ed",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using correct url",
            "fullTitle": "Testing GetSectionList Using correct url",
            "timedOut": false,
            "duration": 52,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.get('/admin/sectionlist')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.status).to.equal(200)\n    // console.log(response.text)\n  //  expect(response.text).to.equal(\"Unauthorized\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "53960c9b-874a-43b5-87f3-934aa5bb61dc",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "53960c9b-874a-43b5-87f3-934aa5bb61dc"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 52,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5962d86c-3cfa-4313-a8d8-9c3c6c51dfcf",
        "title": "Testing AddShow",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\show.Spec.js",
        "file": "\\test\\Admin\\show.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing AddShow \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "84bf9c4e-5797-49c6-bb0e-629151fdd86d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Entered all the fields except the image",
            "fullTitle": "Testing AddShow Entered all the fields except the image",
            "timedOut": false,
            "duration": 529,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422,done)",
            "err": {},
            "isRoot": false,
            "uuid": "0fbf3f14-782b-4fa5-a915-52cace733a74",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Title",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Title",
            "timedOut": false,
            "duration": 45,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.end(function(err,response){\n    if(err) done(err)\n    expect(response.statusCode).to.equal(422)\n    //console.log(response)\n    expect(response.text).to.equal(\"error opening file\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "08458357-5b13-469e-985c-f81b5f8416f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Description",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Description",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Description\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "9f7e7226-969d-4693-ab2d-dc7343585cd1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 205,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\",\"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "5bd61eca-bb7c-484f-bef2-c364fce2b3d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Time",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Time",
            "timedOut": false,
            "duration": 42,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Time\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "96fde967-400b-40f0-b539-32b5d2a179a1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Date",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Date",
            "timedOut": false,
            "duration": 43,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field Show Date\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "290c0581-4f76-4456-83ea-1ab6b15f114e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Number of Tickets",
            "fullTitle": "Testing AddShow Entered all the fields except the Number of Tickets",
            "timedOut": false,
            "duration": 144,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field NumberOfTickets\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "07f85a7b-cf0e-4418-bae6-3f24f197982d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Ticket Details",
            "fullTitle": "Testing AddShow Entered all the fields except the Ticket Details",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field TicketDetails\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "4f56f6fc-4c0d-4c28-a46d-0a213ae3dc7f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered all the fields except the Show Venue",
            "fullTitle": "Testing AddShow Entered all the fields except the Show Venue",
            "timedOut": false,
            "duration": 74,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\" })\n.set('Accept', 'application/json')\n.expect(422, (err,response) => {\n    if(err) done(err)\n    // expect(response.body.message).to.equal(\"Missing the field ShowVenue\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "29344d72-f2b7-4c97-9d4d-b2a9fce5b4ff",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Time field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Time field",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"I am entering text\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "dd3784f9-9596-44e0-9b2b-a841df629963",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Show Date field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Show Date field",
            "timedOut": false,
            "duration": 47,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"I am entering text\", \"NumberOfTickets\":\"100\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {},
            "isRoot": false,
            "uuid": "75a8a17b-2794-4d03-bd07-3413473db0af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Entered invalid inputs to the Number of Tickets field",
            "fullTitle": "Testing AddShow Entered invalid inputs to the Number of Tickets field",
            "timedOut": false,
            "duration": 6,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "request\n.post('/admin/addshow')\n.send({ \"isPublished\": \"false\", \"ShowTitle\": \"Test\", \"ShowDescription\":\"It should work\", \"ShowTime\":\"01:00:00\", \"ShowDate\":\"07/01/2018\", \"NumberOfTickets\":\"I am entering text\", \"Ticketdetails\":\"100\", \"ShowRating\":\"U/A\", \"ShowVenue\":\"Ron Houston\" })\n.set('Accept', 'application/json')\n.expect(422, done)",
            "err": {
              "message": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"",
              "estack": "Error: expected 422 \"Unprocessable Entity\", got 400 \"Bad Request\"\n    at Test._assertStatus (node_modules\\supertest\\lib\\test.js:268:12)\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:283:11)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:173:18)\n    at localAssert (node_modules\\supertest\\lib\\test.js:131:12)\n    at C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\node_modules\\supertest\\lib\\test.js:128:5\n    at Test.Request.callback (node_modules\\superagent\\lib\\node\\index.js:728:3)\n    at IncomingMessage.parser (node_modules\\superagent\\lib\\node\\index.js:916:18)\n    at endReadableNT (_stream_readable.js:1086:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)"
            },
            "isRoot": false,
            "uuid": "52aa842e-a4d8-4953-a9b9-eb244069758a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0fbf3f14-782b-4fa5-a915-52cace733a74",
          "08458357-5b13-469e-985c-f81b5f8416f6",
          "9f7e7226-969d-4693-ab2d-dc7343585cd1",
          "5bd61eca-bb7c-484f-bef2-c364fce2b3d8",
          "96fde967-400b-40f0-b539-32b5d2a179a1",
          "290c0581-4f76-4456-83ea-1ab6b15f114e",
          "07f85a7b-cf0e-4418-bae6-3f24f197982d",
          "4f56f6fc-4c0d-4c28-a46d-0a213ae3dc7f",
          "29344d72-f2b7-4c97-9d4d-b2a9fce5b4ff",
          "dd3784f9-9596-44e0-9b2b-a841df629963",
          "75a8a17b-2794-4d03-bd07-3413473db0af"
        ],
        "failures": [
          "52aa842e-a4d8-4953-a9b9-eb244069758a"
        ],
        "pending": [],
        "skipped": [],
        "duration": 1221,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e43f170c-29c8-471c-bf9a-d1209227759a",
        "title": "Testing Login",
        "fullFile": "C:\\Users\\S530859\\Desktop\\GDPNEW\\GDP\\ProjectNorthwestTheatre\\test\\Admin\\test.Spec.js",
        "file": "\\test\\Admin\\test.Spec.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "Testing Login \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "mongoose.connection.close()\ndone()",
            "err": {},
            "isRoot": false,
            "uuid": "0b7ed230-8966-4734-a9fb-17c0eca07088",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "Using Correct Username and Password",
            "fullTitle": "Testing Login Using Correct Username and Password",
            "timedOut": false,
            "duration": 325,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(200)\n.then(response => {\n    expect(response.body.message).to.equal(\"Login Successful\")\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "d24dda75-e475-43ec-95a0-c52210e6d009",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using correct Username and incorrect Password",
            "fullTitle": "Testing Login Using correct Username and incorrect Password",
            "timedOut": false,
            "duration": 149,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin\", \"Password\": \"@Dmin12\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n       //  console.log(response.text)\n  expect(response.text).to.equal(\"Authentication Failed\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "c931e20a-0c42-424f-bf4f-34799a1d89d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using InCorrect Username and correct Password",
            "fullTitle": "Testing Login Using InCorrect Username and correct Password",
            "timedOut": false,
            "duration": 41,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"admin2\", \"Password\": \"@Dmin123\" })\n.set('Accept', 'application/json')\n.expect(401)\n.then(response => {\n // console.log(response.text)\n  expect(response.text).to.equal(\"User Does not exist\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "0af8c30e-a71e-4c11-92f1-607ddb1c480c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Using Null Username and Password",
            "fullTitle": "Testing Login Using Null Username and Password",
            "timedOut": false,
            "duration": 40,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "request\n.post('/admin/authenticate')\n.send({ \"Username\": \"\", \"Password\": \"\" })\n.set('Accept', 'application/json')\n.end(function(err,response){\nif(err) done(err)\nexpect(response.status).to.equal(401)\n // console.log(response.text)\n  expect(response.text).to.equal(\"Unauthorized\")\n  done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "33a749d1-7870-4492-a74a-3793a2191c09",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d24dda75-e475-43ec-95a0-c52210e6d009",
          "c931e20a-0c42-424f-bf4f-34799a1d89d4",
          "0af8c30e-a71e-4c11-92f1-607ddb1c480c",
          "33a749d1-7870-4492-a74a-3793a2191c09"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 555,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}